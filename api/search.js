window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "doctable", "modulename": "doctable", "kind": "module", "doc": "<h2 id=\"doctable-python-package\"><code>doctable</code> Python Package</h2>\n\n<p>See the <a href=\"https://devinjcornell.com/doctable/\">doctable website</a> for documentation and examples.</p>\n\n<p>Created by <a href=\"https://devinjcornell.com\">Devin J. Cornell</a>.</p>\n\n<hr />\n\n<h2 id=\"doctable-has-a-new-interface\">Doctable has a new interface!</h2>\n\n<p>The package has been updated with an entirely new API to improve on previous limitations and better match the <a href=\"https://www.sqlalchemy.org/\">Sqlalchemy 2.0</a> interface. Inspired by the <a href=\"https://www.attrs.org/en/stable/names.html\">attrs project</a>, I used different names for functions and classes to make it clear that the interface has changed and open the possibility for backwards compatibility with upgraded internals in the future. </p>\n\n<p>For now, stick to installing from the <code>legacy</code> branch when using sqlalchemy &lt;= 1.4, and the <code>master</code> branch for sqlalchemy &gt;= 2.0.</p>\n\n<hr />\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>From <a href=\"https://pypi.org/project/doctable/\">Python Package Index</a>: <code>pip install doctable</code></p>\n\n<p>For sqlalchemy &gt;= 2.0: <code>pip install --upgrade git+https://github.com/devincornell/doctable.git@master</code></p>\n\n<p>For sqlalchemy &lt;= 1.4: <code>pip install --upgrade git+https://github.com/devincornell/doctable.git@legacy</code></p>\n\n<hr />\n\n<h2 id=\"changes-in-version-20\">Changes in Version 2.0</h2>\n\n<ul>\n<li><p>Create database connections using <code>ConnectCore</code> objects instead of <code>ConnectEngine</code> or <code>DocTable</code> objects.</p></li>\n<li><p>Database tables represented by <code>DBTable</code> objects instead of <code>DocTable</code> objects. All <code>DBTable</code> instances originate from a <code>ConnectCore</code> object.</p></li>\n<li><p>Create schemas using the <code>doctable.table_schema</code> decorator instead of the <code>doctable.schema</code> decorator. This new decorator includes constraint and index parameters as well as those for the <code>dataclass</code> objects.</p></li>\n<li><p>The <code>Column</code> function replaces <code>Col</code> as generic default parameter values with more fine-grained control over column properties. This function provides a clearer separation between parameters that affect the behavior of the object as a dataclass (supplied as a <code>FieldArgs</code> object) and those that affect the database column schema (supplied via a <code>ColumnArgs</code> object).</p></li>\n<li><p><strong>New command line interface</strong>: you may execute doctable functions through the command line. Just use <code>python -m doctable execute {args here}</code> to see how to use it.</p></li>\n</ul>\n\n<hr />\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>See the <code>examples/</code> directory for more detailed examples.</p>\n\n<h3 id=\"basic-steps\">Basic steps</h3>\n\n<p>These are the basic steps for using <code>doctable</code> to create a database connection, define a schema, and execute queries. For more examples, see the <a href=\"https://doctable.org\">doctable website</a>.</p>\n\n<p><strong>1. Create a database connection.</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">core</span> <span class=\"o\">=</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span>\n    <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">&#39;:memory:&#39;</span><span class=\"p\">,</span> <span class=\"c1\"># use a filename for a sqlite to write to disk</span>\n    <span class=\"n\">dialect</span><span class=\"o\">=</span><span class=\"s1\">&#39;sqlite&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><strong>2. Define a database schema from a dataclass.</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"nd\">@doctable</span><span class=\"o\">.</span><span class=\"n\">table_schema</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyContainer</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span>\n        <span class=\"n\">column_args</span><span class=\"o\">=</span><span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">ColumnArgs</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">autoincrement</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><strong>3. Emit DDL to create a table from the schema.</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">begin_ddl</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">emitter</span><span class=\"p\">:</span>\n    <span class=\"n\">tab0</span> <span class=\"o\">=</span> <span class=\"n\">emitter</span><span class=\"o\">.</span><span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">container_type</span><span class=\"o\">=</span><span class=\"n\">MyContainer</span><span class=\"p\">)</span>\n<span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">inspect_columns</span><span class=\"p\">(</span><span class=\"s1\">&#39;MyContainer&#39;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p><strong>4. Execute queries on the table.</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">tab1</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">q</span><span class=\"p\">:</span>\n    <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">insert_single</span><span class=\"p\">(</span><span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;devin&#39;</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">())</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;devin&#39;</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "doctable.name", "modulename": "doctable", "qualname": "name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;doctable&#x27;"}, {"fullname": "doctable.connectcore", "modulename": "doctable.connectcore", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.connectcore.TableAlreadyExistsError", "modulename": "doctable.connectcore", "qualname": "TableAlreadyExistsError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "doctable.connectcore.TableDoesNotExistError", "modulename": "doctable.connectcore", "qualname": "TableDoesNotExistError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "doctable.connectcore.ConnectCore", "modulename": "doctable.connectcore", "qualname": "ConnectCore", "kind": "class", "doc": "<p>Manages an sqlalchemy engine and metadata object.</p>\n"}, {"fullname": "doctable.connectcore.ConnectCore.__init__", "modulename": "doctable.connectcore", "qualname": "ConnectCore.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Engine</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">MetaData</span></span>)</span>"}, {"fullname": "doctable.connectcore.ConnectCore.target", "modulename": "doctable.connectcore", "qualname": "ConnectCore.target", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "doctable.connectcore.ConnectCore.dialect", "modulename": "doctable.connectcore", "qualname": "ConnectCore.dialect", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "doctable.connectcore.ConnectCore.engine", "modulename": "doctable.connectcore", "qualname": "ConnectCore.engine", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.engine.base.Engine"}, {"fullname": "doctable.connectcore.ConnectCore.metadata", "modulename": "doctable.connectcore", "qualname": "ConnectCore.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.sql.schema.MetaData"}, {"fullname": "doctable.connectcore.ConnectCore.open_new", "modulename": "doctable.connectcore", "qualname": "ConnectCore.open_new", "kind": "function", "doc": "<p>Connect to a new database (relevant only in sqlite, otherwise use open()).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">echo</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">engine_kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.open_existing", "modulename": "doctable.connectcore", "qualname": "ConnectCore.open_existing", "kind": "function", "doc": "<p>Connect to an existing database (relevant only in sqlite, otherwise use open()).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">echo</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">engine_kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.open", "modulename": "doctable.connectcore", "qualname": "ConnectCore.open", "kind": "function", "doc": "<p>Connect to a database, creating it if it doesn't exist (in the case of sqlite).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">echo</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">engine_kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.check_target_exists", "modulename": "doctable.connectcore", "qualname": "ConnectCore.check_target_exists", "kind": "function", "doc": "<p>Raise exception if the target database does not exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_db</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.new_sqlalchemy_engine", "modulename": "doctable.connectcore", "qualname": "ConnectCore.new_sqlalchemy_engine", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">echo</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">engine_kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Engine</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">MetaData</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.begin_ddl", "modulename": "doctable.connectcore", "qualname": "ConnectCore.begin_ddl", "kind": "function", "doc": "<p>Context manager that creates tables on exit. Use for multi-table schemas.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">ddlemitter</span><span class=\"o\">.</span><span class=\"n\">DDLEmitter</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.query", "modulename": "doctable.connectcore", "qualname": "ConnectCore.query", "kind": "function", "doc": "<p>Create a connection and interface that can be used to make queries.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">connectquery</span><span class=\"o\">.</span><span class=\"n\">ConnectQuery</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.create_sqlalchemy_table", "modulename": "doctable.connectcore", "qualname": "ConnectCore.create_sqlalchemy_table", "kind": "function", "doc": "<p>Create a new table in the database. Raises exception if the table already exists..</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.extend_sqlalchemy_table", "modulename": "doctable.connectcore", "qualname": "ConnectCore.extend_sqlalchemy_table", "kind": "function", "doc": "<p>Create a new table if one does not exist, otherwise will add any indices, \nconstraints, or tables that did not exist previously.\nNOTE: should I revise this to raise an error if the table does not exist already?</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.reflect_sqlalchemy_table", "modulename": "doctable.connectcore", "qualname": "ConnectCore.reflect_sqlalchemy_table", "kind": "function", "doc": "<p>Reflect a table that already exists in the database.\nNote: if table already exists as part of the metadata, it will return that table instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.begin", "modulename": "doctable.connectcore", "qualname": "ConnectCore.begin", "kind": "function", "doc": "<p>Open new transaction in the engine connection pool.\n<a href=\"https://docs.sqlalchemy.org/en/20/tutorial/dbapi_transactions.html\">https://docs.sqlalchemy.org/en/20/tutorial/dbapi_transactions.html</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.connect", "modulename": "doctable.connectcore", "qualname": "ConnectCore.connect", "kind": "function", "doc": "<p>Open new connection in the engine connection pool.\n<a href=\"https://docs.sqlalchemy.org/en/20/tutorial/dbapi_transactions.html\">https://docs.sqlalchemy.org/en/20/tutorial/dbapi_transactions.html</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Connection</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.metadata_tables", "modulename": "doctable.connectcore", "qualname": "ConnectCore.metadata_tables", "kind": "variable", "doc": "<p>Access metadata.tables</p>\n", "annotation": ": Dict[str, sqlalchemy.sql.schema.Table]"}, {"fullname": "doctable.connectcore.ConnectCore.dispose_engine", "modulename": "doctable.connectcore", "qualname": "ConnectCore.dispose_engine", "kind": "function", "doc": "<p>Closes all existing connections attached to engine.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.metadata_reflect", "modulename": "doctable.connectcore", "qualname": "ConnectCore.metadata_reflect", "kind": "function", "doc": "<p>Will register all existing tables using metadata.reflect().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.create_all_tables", "modulename": "doctable.connectcore", "qualname": "ConnectCore.create_all_tables", "kind": "function", "doc": "<p>Create all tables in metadata. Must be used when creating new tables!!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.inspect_columns_all", "modulename": "doctable.connectcore", "qualname": "ConnectCore.inspect_columns_all", "kind": "function", "doc": "<p>Get column info for all tables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ReflectedColumn</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.inspect_indices_all", "modulename": "doctable.connectcore", "qualname": "ConnectCore.inspect_indices_all", "kind": "function", "doc": "<p>Get index info for all tables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ReflectedIndex</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.inspect_columns", "modulename": "doctable.connectcore", "qualname": "ConnectCore.inspect_columns", "kind": "function", "doc": "<p>Get list of columns for a table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ReflectedColumn</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.inspect_indices", "modulename": "doctable.connectcore", "qualname": "ConnectCore.inspect_indices", "kind": "function", "doc": "<p>Wraps Inspector.get_indexes(tabname).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ReflectedIndex</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.inspect_table_names", "modulename": "doctable.connectcore", "qualname": "ConnectCore.inspect_table_names", "kind": "function", "doc": "<p>Provide a list of table names by wrapping Inspector.get_table_names(tabname).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.inspector", "modulename": "doctable.connectcore", "qualname": "ConnectCore.inspector", "kind": "function", "doc": "<p>Get engine for this inspector.\n<a href=\"https://docs.sqlalchemy.org/en/14/core/reflection.html#sqlalchemy.engine.reflection.Inspector\">https://docs.sqlalchemy.org/en/14/core/reflection.html#sqlalchemy.engine.reflection.Inspector</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">reflection</span><span class=\"o\">.</span><span class=\"n\">Inspector</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.enable_foreign_keys", "modulename": "doctable.connectcore", "qualname": "ConnectCore.enable_foreign_keys", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.connectcore.ConnectCore.execute", "modulename": "doctable.connectcore", "qualname": "ConnectCore.execute", "kind": "function", "doc": "<p>Execute query using a temporary connection.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable", "modulename": "doctable.dbtable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.dbtable.dbtable", "modulename": "doctable.dbtable.dbtable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.dbtable.dbtable.DBTable", "modulename": "doctable.dbtable.dbtable", "qualname": "DBTable", "kind": "class", "doc": "<p></p>\n", "bases": "doctable.dbtable.dbtablebase.DBTableBase, typing.Generic[~Container]"}, {"fullname": "doctable.dbtable.dbtable.DBTable.schema", "modulename": "doctable.dbtable.dbtable", "qualname": "DBTable.schema", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.schema.tableschema.tableschema.TableSchema[~Container]"}, {"fullname": "doctable.dbtable.dbtable.DBTable.extend", "modulename": "doctable.dbtable.dbtable", "qualname": "DBTable.extend", "kind": "function", "doc": "<p>Create new table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">container_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">core</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.dbtable.DBTable.create", "modulename": "doctable.dbtable.dbtable", "qualname": "DBTable.create", "kind": "function", "doc": "<p>Create new table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">container_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">core</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.dbtable.DBTable.from_schema", "modulename": "doctable.dbtable.dbtable", "qualname": "DBTable.from_schema", "kind": "function", "doc": "<p>Create a new table from just a schema.\nmake_table_func is either core.create_sqlalchemy_table or core.extend_sqlalchemy_table</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">TableSchema</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">core</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span>,</span><span class=\"param\">\t<span class=\"n\">make_table_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.dbtable.DBTable.query", "modulename": "doctable.dbtable.dbtable", "qualname": "DBTable.query", "kind": "function", "doc": "<p>Return a TableQuery object for querying this table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">tablequery</span><span class=\"o\">.</span><span class=\"n\">TableQuery</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.dbtablebase", "modulename": "doctable.dbtable.dbtablebase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase", "kind": "class", "doc": "<p>Contains interface for working with table wrappers.</p>\n"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase.__init__", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span>,</span><span class=\"param\">\t<span class=\"n\">core</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span></span>)</span>"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase.table", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase.table", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.sql.schema.Table"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase.core", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase.core", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.connectcore.ConnectCore"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase.table_name", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase.table_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase.cols", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase.cols", "kind": "function", "doc": "<p>Return a query with only the specified columns.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">columns</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase.all_cols", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase.all_cols", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase.inspect_columns", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase.inspect_columns", "kind": "function", "doc": "<p>Get engine for this inspector.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">reflection</span><span class=\"o\">.</span><span class=\"n\">Inspector</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase.inspect_indices", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase.inspect_indices", "kind": "function", "doc": "<p>Wraps Inspector.get_indexes(tabname).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.dbtablebase.DBTableBase.name", "modulename": "doctable.dbtable.dbtablebase", "qualname": "DBTableBase.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "doctable.dbtable.ddlemitter", "modulename": "doctable.dbtable.ddlemitter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.dbtable.ddlemitter.DDLEmitter", "modulename": "doctable.dbtable.ddlemitter", "qualname": "DDLEmitter", "kind": "class", "doc": "<p>Interface for creating tables.</p>\n"}, {"fullname": "doctable.dbtable.ddlemitter.DDLEmitter.__init__", "modulename": "doctable.dbtable.ddlemitter", "qualname": "DDLEmitter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">core</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span></span>)</span>"}, {"fullname": "doctable.dbtable.ddlemitter.DDLEmitter.core", "modulename": "doctable.dbtable.ddlemitter", "qualname": "DDLEmitter.core", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.connectcore.ConnectCore"}, {"fullname": "doctable.dbtable.ddlemitter.DDLEmitter.create_table", "modulename": "doctable.dbtable.ddlemitter", "qualname": "DDLEmitter.create_table", "kind": "function", "doc": "<p>Create a new table from a Schema class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">container_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.ddlemitter.DDLEmitter.create_table_if_not_exists", "modulename": "doctable.dbtable.ddlemitter", "qualname": "DDLEmitter.create_table_if_not_exists", "kind": "function", "doc": "<p>Create a new table from a Schema class.\nUse extend_existing=True to connect to an existing table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">container_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.ddlemitter.DDLEmitter.reflect_table", "modulename": "doctable.dbtable.ddlemitter", "qualname": "DDLEmitter.reflect_table", "kind": "function", "doc": "<p>Create a new table from a Schema class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">reflecteddbtable</span><span class=\"o\">.</span><span class=\"n\">ReflectedDBTable</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.dbtable.reflecteddbtable", "modulename": "doctable.dbtable.reflecteddbtable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.dbtable.reflecteddbtable.ReflectedDBTable", "modulename": "doctable.dbtable.reflecteddbtable", "qualname": "ReflectedDBTable", "kind": "class", "doc": "<p></p>\n", "bases": "doctable.dbtable.dbtablebase.DBTableBase"}, {"fullname": "doctable.dbtable.reflecteddbtable.ReflectedDBTable.__init__", "modulename": "doctable.dbtable.reflecteddbtable", "qualname": "ReflectedDBTable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span>,</span><span class=\"param\">\t<span class=\"n\">core</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span></span>)</span>"}, {"fullname": "doctable.dbtable.reflecteddbtable.ReflectedDBTable.from_existing_table", "modulename": "doctable.dbtable.reflecteddbtable", "qualname": "ReflectedDBTable.from_existing_table", "kind": "function", "doc": "<p>Create a DBTable object from an existing table when we do not have a schema.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">core</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">connectcore</span><span class=\"o\">.</span><span class=\"n\">ConnectCore</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">reflecteddbtable</span><span class=\"o\">.</span><span class=\"n\">ReflectedDBTable</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.exposed", "modulename": "doctable.exposed", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.exposed.f", "modulename": "doctable.exposed", "qualname": "f", "kind": "variable", "doc": "<p>See docs for more details:\n<a href=\"https://docs.sqlalchemy.org/en/20/core/functions.html#selected-known-functions\">https://docs.sqlalchemy.org/en/20/core/functions.html#selected-known-functions</a></p>\n", "default_value": "&lt;sqlalchemy.sql.functions._FunctionGenerator object&gt;"}, {"fullname": "doctable.query", "modulename": "doctable.query", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.query.connectquery", "modulename": "doctable.query.connectquery", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.query.connectquery.ConnectQuery", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery", "kind": "class", "doc": "<p>Query interface that is not associated with a particular db table.</p>\n"}, {"fullname": "doctable.query.connectquery.ConnectQuery.__init__", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Connection</span></span>)</span>"}, {"fullname": "doctable.query.connectquery.ConnectQuery.conn", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.conn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.engine.base.Connection"}, {"fullname": "doctable.query.connectquery.ConnectQuery.commit", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.commit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.select_chunks", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.select_chunks", "kind": "function", "doc": "<p>Performs select while querying only a subset of the results at a time. \nUse when results set will take too much memory.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing.Generator[typing.List[sqlalchemy.engine.result.Row]]&#39;</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.select", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.select", "kind": "function", "doc": "<p>Most general select method - returns raw sqlalchemy result.\n    <a href=\"https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult\">https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult</a>\n    select multiple: result.all()\n    select multiple as dataframe: result.df()\n    select first row: result.first() use limit=1 NOTE: returns None if no results\n    select single row: result.one() NOTE: raises exception if not exactly one result\n    select single column: result.scalars().all()\n    select single value: result.scalar_one() NOTE: raises exception if not exactly one result</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cols:</strong>  list of sqlalchemy column types created from calling .cols() or other methods.</li>\n<li><strong>where (sqlachemy BinaryExpression):</strong>  sqlalchemy \"where\" expression to parse</li>\n<li><strong>order_by:</strong>  sqlalchemy order_by directive</li>\n<li><strong>group_by:</strong>  sqlalchemy group_by directive</li>\n<li><strong>limit (int):</strong>  number of entries to return before stopping</li>\n<li><strong>wherestr (str):</strong>  raw sql \"where\" conditionals to add to where input</li>\n<li><strong>**kwargs:</strong>  passed to self.execute()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.bind_as_dataframe", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.bind_as_dataframe", "kind": "function", "doc": "<p>Bind a new method to the result that converts it to a dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.insert_multi", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.insert_multi", "kind": "function", "doc": "<p>Insert multiple rows into the database using executemany-style \nparameter binding.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dtable</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">ifnotunique</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;FAIL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IGNORE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REPLACE&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.insert_single", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.insert_single", "kind": "function", "doc": "<p>Insert a single element into the database using the .values() clause.\nNote: there is a performance cost to this because I enforce \nthe single using .values instead of binding the data. To avoid \nthis cost, past a single-element list to insert_multi instead.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dtable</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ifnotunique</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;FAIL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IGNORE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REPLACE&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;fail&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.update_single", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.update_single", "kind": "function", "doc": "<p>Update row(s) using the .values() clause.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dtable</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.update_many", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.update_many", "kind": "function", "doc": "<p>Update multiple rows in executemany parameter binding with bindparam().\n<a href=\"https://docs.sqlalchemy.org/en/20/tutorial/data_update.html\">https://docs.sqlalchemy.org/en/20/tutorial/data_update.html</a></p>\n\n<p>NOTE: you MUST use bindparam for this to work. See sqlalchemy example below.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">bindparam</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stmt</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">user_table</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">user_table</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">bindparam</span><span class=\"p\">(</span><span class=\"s2\">&quot;oldname&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">bindparam</span><span class=\"p\">(</span><span class=\"s2\">&quot;newname&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">stmt</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"p\">[</span>\n<span class=\"gp\">... </span>            <span class=\"p\">{</span><span class=\"s2\">&quot;oldname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;jack&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;newname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ed&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>            <span class=\"p\">{</span><span class=\"s2\">&quot;oldname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;wendy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;newname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mary&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>            <span class=\"p\">{</span><span class=\"s2\">&quot;oldname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;jim&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;newname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;jake&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>        <span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dtable</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.delete", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.delete", "kind": "function", "doc": "<p>Update row(s) assigning the provided values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dtable</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">all</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.execute_statement", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.execute_statement", "kind": "function", "doc": "<p>Execute a query using a query builder object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dml</span><span class=\"o\">.</span><span class=\"n\">Insert</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Select</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dml</span><span class=\"o\">.</span><span class=\"n\">Update</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dml</span><span class=\"o\">.</span><span class=\"n\">Delete</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.execute_sql", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.execute_sql", "kind": "function", "doc": "<p>Execute raw sql query.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.connectquery.ConnectQuery.is_sequence", "modulename": "doctable.query.connectquery", "qualname": "ConnectQuery.is_sequence", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.statementbuilder", "modulename": "doctable.query.statementbuilder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.query.statementbuilder.StatementBuilder", "modulename": "doctable.query.statementbuilder", "qualname": "StatementBuilder", "kind": "class", "doc": "<p>Methods for creating queries from sqlalchemy expressions.</p>\n"}, {"fullname": "doctable.query.statementbuilder.StatementBuilder.select_query", "modulename": "doctable.query.statementbuilder", "qualname": "StatementBuilder.select_query", "kind": "function", "doc": "<p>Build and exectute select query given all the conditionals provided as parameters.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">group_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">selectable</span><span class=\"o\">.</span><span class=\"n\">Select</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.statementbuilder.StatementBuilder.update_query", "modulename": "doctable.query.statementbuilder", "qualname": "StatementBuilder.update_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dml</span><span class=\"o\">.</span><span class=\"n\">Update</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.statementbuilder.StatementBuilder.insert_query", "modulename": "doctable.query.statementbuilder", "qualname": "StatementBuilder.insert_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span>,</span><span class=\"param\">\t<span class=\"n\">ifnotunique</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;FAIL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IGNORE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REPLACE&#39;</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dml</span><span class=\"o\">.</span><span class=\"n\">Insert</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.statementbuilder.StatementBuilder.delete_query", "modulename": "doctable.query.statementbuilder", "qualname": "StatementBuilder.delete_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">dml</span><span class=\"o\">.</span><span class=\"n\">Delete</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.tablequery", "modulename": "doctable.query.tablequery", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.query.tablequery.TableQuery", "modulename": "doctable.query.tablequery", "qualname": "TableQuery", "kind": "class", "doc": "<p></p>\n", "bases": "typing.Generic[~T]"}, {"fullname": "doctable.query.tablequery.TableQuery.__init__", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dtable</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">cquery</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">connectquery</span><span class=\"o\">.</span><span class=\"n\">ConnectQuery</span></span>)</span>"}, {"fullname": "doctable.query.tablequery.TableQuery.dtable", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.dtable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.dbtable.dbtable.DBTable[~T]"}, {"fullname": "doctable.query.tablequery.TableQuery.cquery", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.cquery", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.query.connectquery.ConnectQuery"}, {"fullname": "doctable.query.tablequery.TableQuery.from_dbtable", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.from_dbtable", "kind": "function", "doc": "<p>Interface for quering tables.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (sqlalchemy.Table):</strong>  table to query from</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">dtable</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">dbtable</span><span class=\"o\">.</span><span class=\"n\">DBTable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">tablequery</span><span class=\"o\">.</span><span class=\"n\">TableQuery</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.tablequery.TableQuery.select_chunks", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.select_chunks", "kind": "function", "doc": "<p>Performs select while querying only a subset of the results at a time. \nUse when results set will take too much memory.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">select_kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing.Generator[typing.List[T]]&#39;</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.tablequery.TableQuery.select", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.select", "kind": "function", "doc": "<p>Select elements from table, wrap result in container objects.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">cols</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_by</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.tablequery.TableQuery.insert_multi", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.insert_multi", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ifnotunique</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;FAIL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IGNORE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REPLACE&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FAIL&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.tablequery.TableQuery.insert_single", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.insert_single", "kind": "function", "doc": "<p>Insert a single element into the database using the .values() clause.\nNote: there is a performance cost to this because I enforce \nthe single using .values instead of binding the data. To avoid \nthis cost, past a single-element list to insert_multi instead.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">container_object</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">T</span>,</span><span class=\"param\">\t<span class=\"n\">ifnotunique</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;FAIL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IGNORE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;REPLACE&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;FAIL&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.tablequery.TableQuery.update_single", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.update_single", "kind": "function", "doc": "<p>Update row(s) using the .values() clause.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.tablequery.TableQuery.update_many", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.update_many", "kind": "function", "doc": "<p>Update multiple rows in executemany parameter binding with bindparam().\n<a href=\"https://docs.sqlalchemy.org/en/20/tutorial/data_update.html\">https://docs.sqlalchemy.org/en/20/tutorial/data_update.html</a></p>\n\n<p>NOTE: you MUST use bindparam for this to work. See sqlalchemy example below.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">bindparam</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stmt</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">user_table</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">user_table</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">bindparam</span><span class=\"p\">(</span><span class=\"s2\">&quot;oldname&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">bindparam</span><span class=\"p\">(</span><span class=\"s2\">&quot;newname&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">stmt</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"p\">[</span>\n<span class=\"gp\">... </span>            <span class=\"p\">{</span><span class=\"s2\">&quot;oldname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;jack&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;newname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ed&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>            <span class=\"p\">{</span><span class=\"s2\">&quot;oldname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;wendy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;newname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mary&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>            <span class=\"p\">{</span><span class=\"s2\">&quot;oldname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;jim&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;newname&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;jake&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>        <span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.query.tablequery.TableQuery.delete", "modulename": "doctable.query.tablequery", "qualname": "TableQuery.delete", "kind": "function", "doc": "<p>Update row(s) assigning the provided values.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">BinaryExpression</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">wherestr</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"nb\">all</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">CursorResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema", "modulename": "doctable.schema", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column", "modulename": "doctable.schema.column", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.column", "modulename": "doctable.schema.column.column", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.column.Column", "modulename": "doctable.schema.column.column", "qualname": "Column", "kind": "function", "doc": "<p>Record column information in the metadata of a dataclass field.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">column_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columnargs</span><span class=\"o\">.</span><span class=\"n\">ColumnArgs</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">field_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">fieldargs</span><span class=\"o\">.</span><span class=\"n\">FieldArgs</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">field</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f358eac1260</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_old", "modulename": "doctable.schema.column.column_old", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.column_old.COLUMN_METADATA_ATTRIBUTE_NAME", "modulename": "doctable.schema.column.column_old", "qualname": "COLUMN_METADATA_ATTRIBUTE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;_column_args&#x27;"}, {"fullname": "doctable.schema.column.column_old.type_hint_to_column_type", "modulename": "doctable.schema.column.column_old", "qualname": "type_hint_to_column_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;class &#x27;int&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Integer&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.String&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Float&#x27;&gt;, &lt;class &#x27;bool&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Boolean&#x27;&gt;, &lt;class &#x27;datetime.datetime&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.DateTime&#x27;&gt;, &lt;class &#x27;datetime.time&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Time&#x27;&gt;, &lt;class &#x27;datetime.date&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Date&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.LargeBinary&#x27;&gt;, typing.Any: &lt;class &#x27;sqlalchemy.sql.sqltypes.PickleType&#x27;&gt;}"}, {"fullname": "doctable.schema.column.column_old.IDColumn", "modulename": "doctable.schema.column.column_old", "qualname": "IDColumn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">field_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">column_kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">field</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f358eac1260</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_old.Column", "modulename": "doctable.schema.column.column_old", "qualname": "Column", "kind": "function", "doc": "<p>Record column information in the metadata of a dataclass field.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sqlalchemy_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">TypeClause</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">_MISSING_TYPE</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">default_factory</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">_MISSING_TYPE</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"nb\">repr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"nb\">hash</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">init</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">compare</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">kw_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">_MISSING_TYPE</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">column_kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">field</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f358eac1260</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_old.ColumnParams", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams", "kind": "class", "doc": "<p>Contains user-specified parameters for a column.</p>\n"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.__init__", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">sqlalchemy_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">TypeClause</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">auto_populate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">type_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">column_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">field_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.column_name", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.column_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.sqlalchemy_type", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.sqlalchemy_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[sqlalchemy.sql.elements.TypeClause]"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.foreign_key", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.foreign_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.auto_populate", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.auto_populate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.type_kwargs", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.type_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.column_kwargs", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.column_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.field_kwargs", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.field_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, Any]]"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.default", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.default", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_old</span><span class=\"o\">.</span><span class=\"n\">ColumnParams</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_old.ColumnParams.sqlalchemy_column", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnParams.sqlalchemy_column", "kind": "function", "doc": "<p>Get a sqlalchemy column from this column info.\nRaises KeyError if there is no match.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">type_hint</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">attr_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_old.ColumnInfo", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnInfo", "kind": "class", "doc": "<p>Contains all information needed to create a column in a database.</p>\n"}, {"fullname": "doctable.schema.column.column_old.ColumnInfo.__init__", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnInfo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">type_hint</span><span class=\"p\">:</span> <span class=\"nb\">type</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_old</span><span class=\"o\">.</span><span class=\"n\">ColumnParams</span></span>)</span>"}, {"fullname": "doctable.schema.column.column_old.ColumnInfo.attr_name", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnInfo.attr_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "doctable.schema.column.column_old.ColumnInfo.type_hint", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnInfo.type_hint", "kind": "variable", "doc": "<p></p>\n", "annotation": ": type"}, {"fullname": "doctable.schema.column.column_old.ColumnInfo.params", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnInfo.params", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.schema.column.column_old.ColumnParams"}, {"fullname": "doctable.schema.column.column_old.ColumnInfo.default", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnInfo.default", "kind": "function", "doc": "<p>Get column info from only a sqlalchemy type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">attr_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">type_hint</span><span class=\"p\">:</span> <span class=\"nb\">type</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_old</span><span class=\"o\">.</span><span class=\"n\">ColumnInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_old.ColumnInfo.from_field", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnInfo.from_field", "kind": "function", "doc": "<p>Get column info from a dataclass field after dataclass is created.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">Field</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_old</span><span class=\"o\">.</span><span class=\"n\">ColumnInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_old.ColumnInfo.name_translation", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnInfo.name_translation", "kind": "function", "doc": "<p>Get (attribute, column) name pairs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_old.ColumnInfo.sqlalchemy_column", "modulename": "doctable.schema.column.column_old", "qualname": "ColumnInfo.sqlalchemy_column", "kind": "function", "doc": "<p>Get a sqlalchemy column from this column info.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types", "modulename": "doctable.schema.column.column_types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.column_types.file_types", "modulename": "doctable.schema.column.column_types.file_types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeBase", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeBase", "kind": "class", "doc": "<p>Base class for file types. Stores data in files and records</p>\n", "bases": "sqlalchemy.sql.visitors.Visitable, typing.Generic[~_T]"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeBase.__init__", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeBase.__init__", "kind": "function", "doc": "<p>Construct a <code>.TypeDecorator</code>.</p>\n\n<p>Arguments sent here are passed to the constructor\nof the class assigned to the <code>impl</code> class level attribute,\nassuming the <code>impl</code> is a callable, and the resulting\nobject is assigned to the <code>self.impl</code> instance attribute\n(thus overriding the class attribute of the same name).</p>\n\n<p>If the class level <code>impl</code> is not a callable (the unusual case),\nit will be assigned to the same instance attribute 'as-is',\nignoring those arguments passed to the constructor.</p>\n\n<p>Subclasses can override this to customize the generation\nof <code>self.impl</code> entirely.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_type_control</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_types</span><span class=\"o\">.</span><span class=\"n\">file_types</span><span class=\"o\">.</span><span class=\"n\">FileTypeControl</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">arg</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeBase.impl", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeBase.impl", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqlalchemy.sql.sqltypes.String&#x27;&gt;"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeBase.control", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeBase.control", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeBase.process_bind_param", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeBase.process_bind_param", "kind": "function", "doc": "<p>Receive a bound parameter value to be converted.</p>\n\n<p>Custom subclasses of <code>_types.TypeDecorator</code> should override\nthis method to provide custom behaviors for incoming data values.\nThis method is called at <strong>statement execution time</strong> and is passed\nthe literal Python data value which is to be associated with a bound\nparameter in the statement.</p>\n\n<p>The operation could be anything desired to perform custom\nbehavior, such as transforming or serializing data.\nThis could also be used as a hook for validating logic.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  Data to operate upon, of any type expected by\nthis method in the subclass.  Can be <code>None</code>.</li>\n<li><strong>dialect</strong>:  the <code>.Dialect</code> in use.</li>\n</ul>\n\n<p><em>seealso:</em>\n:ref:<code>types_typedecorator</code></p>\n\n<p><code>_types.TypeDecorator.process_result_value()</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeBase.process_result_value", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeBase.process_result_value", "kind": "function", "doc": "<p>Receive a result-row column value to be converted.</p>\n\n<p>Custom subclasses of <code>_types.TypeDecorator</code> should override\nthis method to provide custom behaviors for data values\nbeing received in result rows coming from the database.\nThis method is called at <strong>result fetching time</strong> and is passed\nthe literal Python data value that's extracted from a database result\nrow.</p>\n\n<p>The operation could be anything desired to perform custom\nbehavior, such as transforming or deserializing data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  Data to operate upon, of any type expected by\nthis method in the subclass.  Can be <code>None</code>.</li>\n<li><strong>dialect</strong>:  the <code>.Dialect</code> in use.</li>\n</ul>\n\n<p><em>seealso:</em>\n:ref:<code>types_typedecorator</code></p>\n\n<p><code>_types.TypeDecorator.process_bind_param()</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hash_value</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>, </span><span class=\"param\"><span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeBase.write_data", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeBase.write_data", "kind": "function", "doc": "<p>Write file and return hash of new file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_types</span><span class=\"o\">.</span><span class=\"n\">file_types</span><span class=\"o\">.</span><span class=\"n\">FileTypeControl</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeBase.read_data", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeBase.read_data", "kind": "function", "doc": "<p>Read data given the control and hash information.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">hash_value</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_types</span><span class=\"o\">.</span><span class=\"n\">file_types</span><span class=\"o\">.</span><span class=\"n\">FileTypeControl</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.TextFileType", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "TextFileType", "kind": "class", "doc": "<p>Base class for file types. Stores data in files and records</p>\n", "bases": "sqlalchemy.sql.visitors.Visitable, typing.Generic[~_T]"}, {"fullname": "doctable.schema.column.column_types.file_types.TextFileType.write_data", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "TextFileType.write_data", "kind": "function", "doc": "<p>Write file and return hash of new file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_types</span><span class=\"o\">.</span><span class=\"n\">file_types</span><span class=\"o\">.</span><span class=\"n\">FileTypeControl</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.TextFileType.read_data", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "TextFileType.read_data", "kind": "function", "doc": "<p>Read data given the control and hash information.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">hash_value</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_types</span><span class=\"o\">.</span><span class=\"n\">file_types</span><span class=\"o\">.</span><span class=\"n\">FileTypeControl</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.PickleFileType", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "PickleFileType", "kind": "class", "doc": "<p>Base class for file types. Stores data in files and records</p>\n", "bases": "sqlalchemy.sql.visitors.Visitable, typing.Generic[~_T]"}, {"fullname": "doctable.schema.column.column_types.file_types.PickleFileType.write_data", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "PickleFileType.write_data", "kind": "function", "doc": "<p>Write file and return hash of new file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_types</span><span class=\"o\">.</span><span class=\"n\">file_types</span><span class=\"o\">.</span><span class=\"n\">FileTypeControl</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.PickleFileType.read_data", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "PickleFileType.read_data", "kind": "function", "doc": "<p>Read data given the control and hash information.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">hash_value</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_types</span><span class=\"o\">.</span><span class=\"n\">file_types</span><span class=\"o\">.</span><span class=\"n\">FileTypeControl</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.JSONFileType", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "JSONFileType", "kind": "class", "doc": "<p>Base class for file types. Stores data in files and records</p>\n", "bases": "sqlalchemy.sql.visitors.Visitable, typing.Generic[~_T]"}, {"fullname": "doctable.schema.column.column_types.file_types.JSONFileType.write_data", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "JSONFileType.write_data", "kind": "function", "doc": "<p>Write file and return hash of new file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span>,</span><span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_types</span><span class=\"o\">.</span><span class=\"n\">file_types</span><span class=\"o\">.</span><span class=\"n\">FileTypeControl</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.JSONFileType.read_data", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "JSONFileType.read_data", "kind": "function", "doc": "<p>Read data given the control and hash information.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">hash_value</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>,</span><span class=\"param\">\t<span class=\"n\">control</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">column_types</span><span class=\"o\">.</span><span class=\"n\">file_types</span><span class=\"o\">.</span><span class=\"n\">FileTypeControl</span>,</span><span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeControl", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeControl", "kind": "class", "doc": "<p>Controls behavior of a given file type.</p>\n"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeControl.__init__", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeControl.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">raw</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeControl.path", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeControl.path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeControl.raw", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeControl.raw", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeControl.exists", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeControl.exists", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeControl.open", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeControl.open", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> &lt;class &#x27;IO&#x27;&gt;:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeControl.joinpath", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeControl.joinpath", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeControl.create_folder", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeControl.create_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.file_types.FileTypeControl.get_md5", "modulename": "doctable.schema.column.column_types.file_types", "qualname": "FileTypeControl.get_md5", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dumped_string</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.gzip_types", "modulename": "doctable.schema.column.column_types.gzip_types", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.column_types.mappings", "modulename": "doctable.schema.column.column_types.mappings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.column_types.mappings.type_mappings", "modulename": "doctable.schema.column.column_types.mappings", "qualname": "type_mappings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">TypeClause</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.mappings.JSON", "modulename": "doctable.schema.column.column_types.mappings", "qualname": "JSON", "kind": "class", "doc": "<p>Uses sqlalchemy's json mapping implementation.</p>\n", "bases": "sqlalchemy.sql.visitors.Visitable, typing.Generic[~_T]"}, {"fullname": "doctable.schema.column.column_types.mappings.PickleType", "modulename": "doctable.schema.column.column_types.mappings", "qualname": "PickleType", "kind": "class", "doc": "<p>Uses sqlalchemy's pickle mapping implementation.</p>\n", "bases": "sqlalchemy.sql.visitors.Visitable, typing.Generic[~_T]"}, {"fullname": "doctable.schema.column.column_types.mappings.ColumnTypeMatcher", "modulename": "doctable.schema.column.column_types.mappings", "qualname": "ColumnTypeMatcher", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.column_types.mappings.ColumnTypeMatcher.type_hint_to_column_type_mapping", "modulename": "doctable.schema.column.column_types.mappings", "qualname": "ColumnTypeMatcher.type_hint_to_column_type_mapping", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;class &#x27;int&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Integer&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Float&#x27;&gt;, &lt;class &#x27;bool&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Boolean&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.String&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.LargeBinary&#x27;&gt;, &lt;class &#x27;datetime.datetime&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.DateTime&#x27;&gt;, &lt;class &#x27;datetime.time&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Time&#x27;&gt;, &lt;class &#x27;datetime.date&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Date&#x27;&gt;, &lt;class &#x27;doctable.schema.column.column_types.mappings.PickleType&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.PickleType&#x27;&gt;, &#x27;datetime.datetime&#x27;: &lt;class &#x27;sqlalchemy.sql.sqltypes.DateTime&#x27;&gt;, &#x27;datetime.time&#x27;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Time&#x27;&gt;, &#x27;datetime.date&#x27;: &lt;class &#x27;sqlalchemy.sql.sqltypes.Date&#x27;&gt;, &lt;class &#x27;doctable.schema.column.column_types.mappings.JSON&#x27;&gt;: &lt;class &#x27;sqlalchemy.sql.sqltypes.JSON&#x27;&gt;}"}, {"fullname": "doctable.schema.column.column_types.mappings.ColumnTypeMatcher.type_hint_to_column_type", "modulename": "doctable.schema.column.column_types.mappings", "qualname": "ColumnTypeMatcher.type_hint_to_column_type", "kind": "function", "doc": "<p>Match type hint to sqlalchemy column type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">type_hint</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">TypeClause</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.column_types.mappings.ColumnTypeMatcher.type_hint_matches", "modulename": "doctable.schema.column.column_types.mappings", "qualname": "ColumnTypeMatcher.type_hint_matches", "kind": "function", "doc": "<p>Check if supplied type hint matches the given candidate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">type_hint</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">match_type_hint</span><span class=\"p\">:</span> <span class=\"n\">Type</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columnargs", "modulename": "doctable.schema.column.columnargs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.columnargs.COLUMN_METADATA_ATTRIBUTE_NAME", "modulename": "doctable.schema.column.columnargs", "qualname": "COLUMN_METADATA_ATTRIBUTE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;_column_args&#x27;"}, {"fullname": "doctable.schema.column.columnargs.has_column_args", "modulename": "doctable.schema.column.columnargs", "qualname": "has_column_args", "kind": "function", "doc": "<p>Check if a dataclass field has column args.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">Field</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columnargs.get_column_args", "modulename": "doctable.schema.column.columnargs", "qualname": "get_column_args", "kind": "function", "doc": "<p>Get the column args from a dataclass field.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">Field</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columnargs</span><span class=\"o\">.</span><span class=\"n\">ColumnArgs</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columnargs.set_column_args", "modulename": "doctable.schema.column.columnargs", "qualname": "set_column_args", "kind": "function", "doc": "<p>Check if a dataclass field has column args.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">column_args</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columnargs</span><span class=\"o\">.</span><span class=\"n\">ColumnArgs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs", "kind": "class", "doc": "<p>Args to be passed to sqlalchemy.Column. Used by client directly through constructor.\n    Read more about sqlalchemy.Column here:\n    https://docs.sqlalchemy.org/en/20/core/metadata.html#sqlalchemy.schema.Column.__init__</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>order:</strong>  order of column in table (non-numbered appear after numbered)</li>\n<li><strong>column_name:</strong>  use when column is different from object attribute</li>\n<li><strong>type_kwargs:</strong>  keyword arguments to pass to sqlalchemy type. only used when type inferred from python type hint</li>\n<li><strong>use_type:</strong>  use this type instead of inferring from python type hint</li>\n<li><strong>sqlalchemy_type:</strong>  type of column in database using sqlachemy types (any kwargs should be passed directly here)</li>\n<li><strong>autoincrement:</strong>  whether to autoincrement the column</li>\n<li><strong>nullable:</strong>  whether the column can be null</li>\n<li><strong>unique:</strong>  whether the column is unique</li>\n<li><strong>primary_key:</strong>  whether the column is a primary key</li>\n<li><strong>index:</strong>  whether the column is indexed</li>\n<li><strong>foreign_key:</strong>  name of the column (tabname.colname) that this column references</li>\n<li><strong>default:</strong>  default value for column</li>\n<li><strong>onupdate:</strong>  function to call when column is updated</li>\n<li><strong>server_default:</strong>  default value for column on server side</li>\n<li><strong>server_onupdate:</strong>  function to call when column is updated on server side</li>\n<li><strong>comment:</strong>  comment to add to column in database</li>\n<li><strong>other_kwargs:</strong>  see Column.__init__ link above for any other kwargs not listed here</li>\n</ul>\n"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.__init__", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">use_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sqlalchemy_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">TypeClause</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">autoincrement</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">nullable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">unique</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">primary_key</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">onupdate</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">server_default</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">FetchedValue</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">sqltypes</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">server_onupdate</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">FetchedValue</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">other_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.order", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "inf"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.column_name", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.column_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.type_kwargs", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.type_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.use_type", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.use_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Type]", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.sqlalchemy_type", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.sqlalchemy_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[sqlalchemy.sql.elements.TypeClause]", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.autoincrement", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.autoincrement", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.nullable", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.nullable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.unique", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.unique", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.primary_key", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.primary_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.index", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.index", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.foreign_key", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.foreign_key", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.default", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.default", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.onupdate", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.onupdate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable[[], Any]", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.server_default", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.server_default", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[str, sqlalchemy.sql.schema.FetchedValue, sqlalchemy.sql.sqltypes.Text]", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.server_onupdate", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.server_onupdate", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqlalchemy.sql.schema.FetchedValue", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.comment", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.comment", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.other_kwargs", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.other_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.check_valid", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.check_valid", "kind": "function", "doc": "<p>Used to check whether the result is valid after creation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.sqlalchemy_foreign_key", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.sqlalchemy_foreign_key", "kind": "function", "doc": "<p>Get a foreign key object or None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columnargs.ColumnArgs.sqlalchemy_column_kwargs", "modulename": "doctable.schema.column.columnargs", "qualname": "ColumnArgs.sqlalchemy_column_kwargs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columninfo", "modulename": "doctable.schema.column.columninfo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo", "kind": "class", "doc": "<p>Contains all information needed to create a column in a database.</p>\n"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.__init__", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">type_hint</span><span class=\"p\">:</span> <span class=\"nb\">type</span>,</span><span class=\"param\">\t<span class=\"n\">defined_order</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">column_args</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columnargs</span><span class=\"o\">.</span><span class=\"n\">ColumnArgs</span></span>)</span>"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.attr_name", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.attr_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.type_hint", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.type_hint", "kind": "variable", "doc": "<p></p>\n", "annotation": ": type"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.defined_order", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.defined_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.column_args", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.column_args", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.schema.column.columnargs.ColumnArgs"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.default", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.default", "kind": "function", "doc": "<p>Get column info from only a sqlalchemy type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">attr_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">type_hint</span><span class=\"p\">:</span> <span class=\"nb\">type</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columninfo</span><span class=\"o\">.</span><span class=\"n\">ColumnInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.from_field", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.from_field", "kind": "function", "doc": "<p>Get column info from a dataclass field after dataclass is created.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">Field</span>,</span><span class=\"param\">\t<span class=\"n\">defined_order</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columninfo</span><span class=\"o\">.</span><span class=\"n\">ColumnInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.sqlalchemy_column", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.sqlalchemy_column", "kind": "function", "doc": "<p>Get a sqlalchemy column from this column info.\nRaises KeyError if there is no match.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.column_type_args", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.column_type_args", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">TypeClause</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.estimate_sqlalchemy_type", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.estimate_sqlalchemy_type", "kind": "function", "doc": "<p>Guess sqlclehmy type here - use column_type_args for correct version.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">TypeClause</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.name_translation", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.name_translation", "kind": "function", "doc": "<p>Get (attribute, column) name pairs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.final_name", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.final_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.order_key", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.order_key", "kind": "function", "doc": "<p>Key used to generate column ordering.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.columninfo.ColumnInfo.info_dict", "modulename": "doctable.schema.column.columninfo", "qualname": "ColumnInfo.info_dict", "kind": "function", "doc": "<p>Get a human-readable dictionary of information about this column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.fieldargs", "modulename": "doctable.schema.column.fieldargs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs", "kind": "class", "doc": "<p>Creates kwargs dict to be passed to dataclasses.field. Read about args here:\n<a href=\"https://docs.python.org/3/library/dataclasses.html\">https://docs.python.org/3/library/dataclasses.html</a></p>\n"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.__init__", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"n\">MISSING</span>,</span><span class=\"param\">\t<span class=\"n\">default_factory</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">missing</span><span class=\"o\">.</span><span class=\"n\">MissingType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MISSING</span>,</span><span class=\"param\">\t<span class=\"n\">init_required</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"nb\">repr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"nb\">hash</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">init</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">compare</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">kw_only</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">missing</span><span class=\"o\">.</span><span class=\"n\">MissingType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MISSING</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.default", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.default", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any", "default_value": "MISSING"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.default_factory", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.default_factory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[Callable[[], Any], doctable.schema.missing.MissingType]", "default_value": "MISSING"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.init_required", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.init_required", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.repr", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.repr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.hash", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.hash", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]", "default_value": "None"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.init", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.init", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.compare", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.compare", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.kw_only", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.kw_only", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[bool, doctable.schema.missing.MissingType]", "default_value": "MISSING"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.metadata", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.metadata", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.get_dataclass_field", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.get_dataclass_field", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">column_args</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columnargs</span><span class=\"o\">.</span><span class=\"n\">ColumnArgs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">Field</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.column.fieldargs.FieldArgs.dict_without_metadata", "modulename": "doctable.schema.column.fieldargs", "qualname": "FieldArgs.dict_without_metadata", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.missing", "modulename": "doctable.schema.missing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.missing.MissingType", "modulename": "doctable.schema.missing", "qualname": "MissingType", "kind": "class", "doc": "<p>Create a collection of name/value pairs.</p>\n\n<p>Example enumeration:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">RED</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">... </span>    <span class=\"n\">BLUE</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">... </span>    <span class=\"n\">GREEN</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n\n<p>Access them by:</p>\n\n<ul>\n<li>attribute access::</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"o\">.</span><span class=\"n\">RED</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<ul>\n<li>value lookup:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<ul>\n<li>name lookup:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"p\">[</span><span class=\"s1\">&#39;RED&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<p>Enumerations can be iterated over, and know how many members they have:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Color.RED: 1&gt;, &lt;Color.BLUE: 2&gt;, &lt;Color.GREEN: 3&gt;]</span>\n</code></pre>\n</div>\n\n<p>Methods can be added to enumerations, and members can have their own\nattributes -- see the documentation for details.</p>\n", "bases": "enum.Enum"}, {"fullname": "doctable.schema.missing.MissingType.MISSING", "modulename": "doctable.schema.missing", "qualname": "MissingType.MISSING", "kind": "variable", "doc": "<p></p>\n", "default_value": "MISSING"}, {"fullname": "doctable.schema.missing.MISSING", "modulename": "doctable.schema.missing", "qualname": "MISSING", "kind": "variable", "doc": "<p>Represents value that should not be inserted into the database or was not retreived from the database.</p>\n", "default_value": "MISSING"}, {"fullname": "doctable.schema.tableschema", "modulename": "doctable.schema.tableschema", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.tableschema.constraints", "modulename": "doctable.schema.tableschema.constraints", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.tableschema.constraints.ForeignKey", "modulename": "doctable.schema.tableschema.constraints", "qualname": "ForeignKey", "kind": "function", "doc": "<p>Create a foreign key constraint on some columns.\n<a href=\"https://docs.sqlalchemy.org/en/20/core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint\">https://docs.sqlalchemy.org/en/20/core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint</a>\n<a href=\"https://docs.sqlalchemy.org/en/20/core/constraints.html\">https://docs.sqlalchemy.org/en/20/core/constraints.html</a>\nNOTE from docs: It\u2019s important to note that the ForeignKeyConstraint is \nthe only way to define a composite foreign key. While we could also have \nplaced individual ForeignKey objects on both the invoice_item.invoice_id \nand invoice_item.ref_num columns, SQLAlchemy would not be aware that these \ntwo values should be paired together - it would be two individual foreign \nkey constraints instead of a single composite foreign key referencing two \ncolumns.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">local_columns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">from_columns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">onupdate</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;CASCADE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;RESTRICT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;SET NULL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NO ACTION&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;SET DEFAULT&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NO ACTION&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ondelete</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;CASCADE&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;RESTRICT&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;SET NULL&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;NO ACTION&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;SET DEFAULT&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NO ACTION&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">ForeignKeyConstraint</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.constraints.CheckConstraint", "modulename": "doctable.schema.tableschema.constraints", "qualname": "CheckConstraint", "kind": "function", "doc": "<p>Create a check constraint on some columns.\n<a href=\"https://docs.sqlalchemy.org/en/20/core/constraints.html#sqlalchemy.schema.CheckConstraint\">https://docs.sqlalchemy.org/en/20/core/constraints.html#sqlalchemy.schema.CheckConstraint</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sqltext</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">CheckConstraint</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.constraints.UniqueConstraint", "modulename": "doctable.schema.tableschema.constraints", "qualname": "UniqueConstraint", "kind": "function", "doc": "<p>Create a unique constraint on some columns.\n<a href=\"https://docs.sqlalchemy.org/en/20/core/constraints.html#sqlalchemy.schema.UniqueConstraint\">https://docs.sqlalchemy.org/en/20/core/constraints.html#sqlalchemy.schema.UniqueConstraint</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">UniqueConstraint</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.constraints.PrimaryKeyConstraint", "modulename": "doctable.schema.tableschema.constraints", "qualname": "PrimaryKeyConstraint", "kind": "function", "doc": "<p>Create a primary key constraint on some columns.\n<a href=\"https://docs.sqlalchemy.org/en/20/core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint\">https://docs.sqlalchemy.org/en/20/core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">PrimaryKeyConstraint</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.general", "modulename": "doctable.schema.tableschema.general", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.tableschema.general.SCHEMA_ATTRIBUTE_NAME", "modulename": "doctable.schema.tableschema.general", "qualname": "SCHEMA_ATTRIBUTE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;_table_schema&#x27;"}, {"fullname": "doctable.schema.tableschema.general.set_schema", "modulename": "doctable.schema.tableschema.general", "qualname": "set_schema", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">TableSchema</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.general.get_schema", "modulename": "doctable.schema.tableschema.general", "qualname": "get_schema", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">TableSchema</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.index", "modulename": "doctable.schema.tableschema.index", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.tableschema.index.Index", "modulename": "doctable.schema.tableschema.index", "qualname": "Index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">IndexParams</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.index.IndexParams", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexParams", "kind": "class", "doc": "<p>Information passed by user.</p>\n"}, {"fullname": "doctable.schema.tableschema.index.IndexParams.__init__", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexParams.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "doctable.schema.tableschema.index.IndexParams.column_names", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexParams.column_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "doctable.schema.tableschema.index.IndexParams.kwargs", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexParams.kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "doctable.schema.tableschema.index.IndexParams.default", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexParams.default", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">IndexParams</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.index.IndexParams.sqlalchemy_index", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexParams.sqlalchemy_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Index</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.index.IndexInfo", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexInfo", "kind": "class", "doc": "<p>Includes params and the name of the index needed to create the index.</p>\n"}, {"fullname": "doctable.schema.tableschema.index.IndexInfo.__init__", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexInfo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">IndexParams</span></span>)</span>"}, {"fullname": "doctable.schema.tableschema.index.IndexInfo.name", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexInfo.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "doctable.schema.tableschema.index.IndexInfo.params", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexInfo.params", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.schema.tableschema.index.IndexParams"}, {"fullname": "doctable.schema.tableschema.index.IndexInfo.from_params", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexInfo.from_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">IndexParams</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">IndexInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.index.IndexInfo.default", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexInfo.default", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">IndexInfo</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.index.IndexInfo.sqlalchemy_index", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexInfo.sqlalchemy_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Index</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.index.IndexInfo.info_dict", "modulename": "doctable.schema.tableschema.index", "qualname": "IndexInfo.info_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema", "modulename": "doctable.schema.tableschema.tableschema", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.tableschema.tableschema.AttrColNameMappings", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "AttrColNameMappings", "kind": "class", "doc": "<p>Contains all information needed to construct a db table.</p>\n"}, {"fullname": "doctable.schema.tableschema.tableschema.AttrColNameMappings.__init__", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "AttrColNameMappings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">attr_to_col</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">col_to_attr</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">empty_col_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">empty_attr_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "doctable.schema.tableschema.tableschema.AttrColNameMappings.attr_to_col", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "AttrColNameMappings.attr_to_col", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, str]"}, {"fullname": "doctable.schema.tableschema.tableschema.AttrColNameMappings.col_to_attr", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "AttrColNameMappings.col_to_attr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, str]"}, {"fullname": "doctable.schema.tableschema.tableschema.AttrColNameMappings.empty_col_kwargs", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "AttrColNameMappings.empty_col_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "doctable.schema.tableschema.tableschema.AttrColNameMappings.empty_attr_kwargs", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "AttrColNameMappings.empty_attr_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "doctable.schema.tableschema.tableschema.AttrColNameMappings.from_column_infos", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "AttrColNameMappings.from_column_infos", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">column_infos</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columninfo</span><span class=\"o\">.</span><span class=\"n\">ColumnInfo</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">AttrColNameMappings</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema", "kind": "class", "doc": "<p>Contains all information needed to construct and work with a db table.</p>\n", "bases": "typing.Generic[~Container]"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.__init__", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">container_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columninfo</span><span class=\"o\">.</span><span class=\"n\">ColumnInfo</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">IndexInfo</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">constraints</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Constraint</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">table_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">name_mappings</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">AttrColNameMappings</span></span>)</span>"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.table_name", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.table_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.container_type", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.container_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Type[~Container]"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.columns", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.columns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[doctable.schema.column.columninfo.ColumnInfo]"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.indices", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.indices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[doctable.schema.tableschema.index.IndexInfo]"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.constraints", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.constraints", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[sqlalchemy.sql.schema.Constraint]"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.table_kwargs", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.table_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.name_mappings", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.name_mappings", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.schema.tableschema.tableschema.AttrColNameMappings"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.from_container", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.from_container", "kind": "function", "doc": "<p>Create from basic args - called directly from decorator.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">container_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">IndexParams</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">constraints</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Constraint</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">table_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">TableSchema</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.parse_column_infos", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.parse_column_infos", "kind": "function", "doc": "<p>Get column infos from a container type.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columninfo</span><span class=\"o\">.</span><span class=\"n\">ColumnInfo</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.container_from_row", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.container_from_row", "kind": "function", "doc": "<p>Get a data container from a row.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">Row</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">Container</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.dict_from_container", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.dict_from_container", "kind": "function", "doc": "<p>Get a dictionary representation of this schema for insertion, ignoring MISSING values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">Container</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.sqlalchemy_table", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.sqlalchemy_table", "kind": "function", "doc": "<p>Depricated. Creates and returns new sqlalchemy table..</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">MetaData</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Table</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.sqlalchemy_table_args", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.sqlalchemy_table_args", "kind": "function", "doc": "<p>Get name, args, kwargs tuple for creating an sqlalchemy table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.table_args", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.table_args", "kind": "function", "doc": "<p>Get a list of table args.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Index</span><span class=\"p\">,</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Constraint</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.sqlalchemy_columns", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.sqlalchemy_columns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.sqlalchemy_indices", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.sqlalchemy_indices", "kind": "function", "doc": "<p>Get list of sqlalchemy indices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Index</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema.TableSchema.get_column_mappings", "modulename": "doctable.schema.tableschema.tableschema", "qualname": "TableSchema.get_column_mappings", "kind": "function", "doc": "<p>Get (column to attribute) and (attribute to column) name mappings, and auto-populated columns.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">column_infos</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">columninfo</span><span class=\"o\">.</span><span class=\"n\">ColumnInfo</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschema_decorator", "modulename": "doctable.schema.tableschema.tableschema_decorator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.tableschema.tableschema_decorator.table_schema", "modulename": "doctable.schema.tableschema.tableschema_decorator", "qualname": "table_schema", "kind": "function", "doc": "<p>A decorator to change a regular class into a schema object class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">_Cls</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">IndexParams</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">constraints</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Constraint</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">init</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"nb\">repr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">eq</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unsafe_hash</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">frozen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">match_args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kw_only</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">slots</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">weakref_slot</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">table_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschemainspector", "modulename": "doctable.schema.tableschema.tableschemainspector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.inspect_schema", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "inspect_schema", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">Container</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">tableschemainspector</span><span class=\"o\">.</span><span class=\"n\">TableSchemaInspector</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.TableSchemaInspector", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "TableSchemaInspector", "kind": "class", "doc": "<p>Used to generate user-readable information about a \ntable before it has been created.</p>\n"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.TableSchemaInspector.__init__", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "TableSchemaInspector.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">TableSchema</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">Container</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.TableSchemaInspector.schema", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "TableSchemaInspector.schema", "kind": "variable", "doc": "<p></p>\n", "annotation": ": doctable.schema.tableschema.tableschema.TableSchema[~Container]"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.TableSchemaInspector.from_container", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "TableSchemaInspector.from_container", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">container</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">Container</span></span><span class=\"return-annotation\">) -> <span class=\"n\">doctable</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">tableschema</span><span class=\"o\">.</span><span class=\"n\">tableschemainspector</span><span class=\"o\">.</span><span class=\"n\">TableSchemaInspector</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.TableSchemaInspector.table_name", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "TableSchemaInspector.table_name", "kind": "function", "doc": "<p>Get the name of the table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.TableSchemaInspector.index_info_df", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "TableSchemaInspector.index_info_df", "kind": "function", "doc": "<p>Get a dataframe of index information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.TableSchemaInspector.index_info", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "TableSchemaInspector.index_info", "kind": "function", "doc": "<p>Get a dataframe of column information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.TableSchemaInspector.column_info_df", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "TableSchemaInspector.column_info_df", "kind": "function", "doc": "<p>Get a dataframe of column information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "doctable.schema.tableschema.tableschemainspector.TableSchemaInspector.column_info", "modulename": "doctable.schema.tableschema.tableschemainspector", "qualname": "TableSchemaInspector.column_info", "kind": "function", "doc": "<p>Get a dataframe of column information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();